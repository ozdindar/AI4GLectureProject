package live.boardgames.chss.bots.Cenk;

import live.boardgames.base.Board;
import live.boardgames.base.BoardEvaluator;
import live.boardgames.chss.internal.ChessBoard;
import live.boardgames.chss.internal.knowledge.PieceType;

public class Evaluator implements BoardEvaluator {


        private static int WPawn = 10;
        private static int BPawn = -10;
        private static int WKnight = 32;
        private static int BKnight = -32;
        private static int WBishop = 33;
        private static int BBishop = -33;
        private static int WRook = 50;
        private static int BRook = -50;
        private static int WQueen = 90;
        private static int BQueen = -90;
        private static int WKing = 2000;
        private static int BKing = -2000;



        double [][] WPawnTable = {
                {0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
                {5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0},
                {1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0},
                {0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5},
                {0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0},
                {0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5},
                {0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5},
                {0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0}
        };

        double [][] BPawnTable = {
                {0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
                {0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5},
                {0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5},
                {0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0},
                {0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5},
                {1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0},
                {5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0},
                {0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
        };
        double [][] WKnightTable = {
                {-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0},
                {-4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0},
                {-3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0},
                {-3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0},
                {-3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0},
                {-3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0},
                {-4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0},
                {-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0}
        };
        double [][] BKnightTable = {
                {-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0},
                {-4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0},
                {-3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0},
                {-3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0},
                {-3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0},
                {-3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0},
                {-4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0},
                {-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0}
        };
        double [][] WBishopTable = {
                { -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0},
                { -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0},
                { -1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0},
                {-1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0},
                {-1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0},
                {-1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0},
                {-1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0},
                {-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0}
        };
        double [][] BBishopTable = {
                {-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0},
                {-1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0},
                {-1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0},
                {-1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0},
                {-1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0},
                {-1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0},
                {-1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0},
                {-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0}
        };
        double [][] WRookTable = {
                {0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
                {0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5},
                {-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5},
                {-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5},
                {-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5},
                {-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5},
                {-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5},
                {0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0}
        };
        double [][] BRookTable = {
                {0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0},
                {-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5},
                {-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5},
                {-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5},
                {-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5},
                {-0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5},
                {0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5},
                {0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0},
        };
        double [][] queenTable = {
                {-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0},
                {-1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0},
                {-1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0},
                {-0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5},
                {0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5},
                {-1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0},
                {-1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0},
                {-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0}
        };
        double [][] WKingTable = {
                {-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                {-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                {-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                {-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                {-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0},
                {-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0},
                {2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0},
                {2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0}
        };
        double [][] BKingTable = {
                {2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0},
                {2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0},
                {-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0},
                {-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0},
                {-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                {-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                {-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
                {-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0},
        };
        @Override
        public double evaluate(Board board, int player) {
            double score = getTableScore(board);
            return score*(player==1?-1:1);
        }

        public double getTableScore(Board board){
            double score = 0;
            ChessBoard chessBoard = (ChessBoard)board;

            for (int x = 0; x < 8; x++){
                for(int y = 0; y < 8; y++){

                    switch (chessBoard.get(x,y)){
                        case Empty:
                            break;
                        case WRook:
                            score = score + WRook + WRookTable[x][y];
                            break;
                        case WKnight:
                            score = score + WKnight + WKnightTable[x][y];
                            break;
                        case WBishop:
                            score = score + WBishop + WBishopTable[x][y];
                            break;
                        case WQueen:
                            score = score + WQueen + queenTable [x][y];
                            break;
                        case WKing:
                            score = score + WKing + WKingTable[x][y];
                            break;
                        case WPawn:
                            score = score + WPawn + WPawnTable[x][y];
                            break;
                        case BPawn:
                            score = score + BPawn - BPawnTable[x][y];
                            break;
                        case BRook:
                            score = score + BRook - BRookTable[x][y];
                            break;
                        case BKnight:
                            score = score + BKnight - BKnightTable[x][y];
                            break;
                        case BBishop:
                            score = score + BBishop - BBishopTable[x][y];
                            break;
                        case BQueen:
                            score = score + BQueen - queenTable[x][y];
                            break;
                        case BKing:
                            score = score + BKing - BKingTable[x][y];
                            break;
                    }

                }
            }
            return score;
        }
    }
