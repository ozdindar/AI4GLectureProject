package live.personal.chess.bots.simple;

import live.boardgames.base.Board;
import live.boardgames.base.BoardEvaluator;
import live.boardgames.chss.internal.ChessBoard;
import live.boardgames.chss.internal.knowledge.Chess;
import live.boardgames.chss.internal.knowledge.PieceType;

public class MaterialEvaluator implements BoardEvaluator {

    static int pieceValues[][][] = {
            {       // 0-Empty
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0}
            },
            {       // 1-Wking
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0}
            },
            {       // 2-WQueen
                    {9 ,10,10,10,10,10,10,9 },
                    {10,11,11,11,11,11,11,10},
                    {10,11,12,12,12,12,11,10},
                    {10,11,12,14,14,12,11,10},
                    {10,11,12,14,14,12,11,10},
                    {10,11,12,12,12,12,11,10},
                    {10,11,11,11,11,11,11,10},
                    {9 ,10,10,10,10,10,10,9}
            },
            {       // 3-WRook
                    {7, 7, 7, 7, 7, 7, 7, 7 },
                    {7, 7, 7, 7, 7, 7, 7, 7 },
                    {7, 7, 7, 7, 7, 7, 7, 7 },
                    {7, 7, 7, 7, 7, 7, 7, 7 },
                    {7, 7, 7, 7, 7, 7, 7, 7 },
                    {7, 7, 7, 7, 7, 7, 7, 7 },
                    {8, 8, 8, 8, 8, 8, 8, 8 },
                    {7, 7, 7, 7, 7, 7, 7, 7 }
            },
            {       // 4-WBishop
                    {3, 4, 4, 4, 4, 4, 4, 3 },
                    {4, 5, 5, 5, 5, 5, 5, 4 },
                    {4, 5, 5, 5, 5, 5, 5, 4 },
                    {4, 5, 5, 6, 6, 5, 5, 4 },
                    {4, 5, 5, 6, 6, 5, 5, 4 },
                    {4, 5, 5, 5, 5, 5, 5, 4 },
                    {4, 5, 5, 5, 5, 5, 5, 4 },
                    {3, 4, 4, 4, 4, 4, 4, 3 }
            },
            {       // 5-WKnight
                    {2, 3, 3, 3, 3, 3, 3, 2 },
                    {4, 4, 5, 5, 5, 5, 4, 3 },
                    {4, 5, 5, 5, 5, 5, 5, 3 },
                    {4, 5, 5, 6, 6, 5, 5, 3 },
                    {4, 5, 5, 6, 6, 5, 5, 3 },
                    {4, 5, 5, 5, 5, 5, 5, 3 },
                    {4, 4, 5, 5, 5, 5, 4, 3 },
                    {2, 3, 3, 3, 3, 3, 3, 2 }
            },
            {       // 6-WPawn
                    {1, 1, 1, 1, 1, 1, 1, 1 },
                    {1, 1, 1, 1, 1, 1, 1, 1 },
                    {1, 1, 1, 1, 1, 1, 1, 1 },
                    {1, 1, 1, 1, 1, 1, 1, 1 },
                    {2, 2, 2, 2, 2, 2, 2, 2 },
                    {2, 2, 2, 2, 2, 2, 2, 2 },
                    {3, 3, 3, 3, 3, 3, 3, 3 },
                    {1, 1, 1, 1, 1, 1, 1, 1 }
            },
            {       // 7-Bking
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0}
            },
            {       // 8-BQueen
                    {-9 ,-10,-10,-10,-10,-10,-10,-9 },
                    {-10,-11,-11,-11,-11,-11,-11,-10},
                    {-10,-11,-12,-12,-12,-12,-11,-10},
                    {-10,-11,-12,-14,-14,-12,-11,-10},
                    {-10,-11,-12,-14,-14,-12,-11,-10},
                    {-10,-11,-12,-12,-12,-12,-11,-10},
                    {-10,-11,-11,-11,-11,-11,-11,-10},
                    {-9 ,-10,-10,-10,-10,-10,-10,-9}
            },
            {       // 9-BRook
                    {-7, -7, -7, -7, -7, -7, -7, -7 },
                    {-8, -8, -8, -8, -8, -8, -8, -8 },
                    {-7, -7, -7, -7, -7, -7, -7, -7 },
                    {-7, -7, -7, -7, -7, -7, -7, -7 },
                    {-7, -7, -7, -7, -7, -7, -7, -7 },
                    {-7, -7, -7, -7, -7, -7, -7, -7 },
                    {-7, -7, -7, -7, -7, -7, -7, -7 },
                    {-7, -7, -7, -7, -7, -7, -7, -7 }
            },
            {       // 10-BBishop
                    {-3, -4, -4, -4, -4, -4, -4, -3 },
                    {-4, -5, -5, -5, -5, -5, -5, -4 },
                    {-4, -5, -5, -5, -5, -5, -5, -4 },
                    {-4, -5, -5, -6, -6, -5, -5, -4 },
                    {-4, -5, -5, -6, -6, -5, -5, -4 },
                    {-4, -5, -5, -5, -5, -5, -5, -4 },
                    {-4, -5, -5, -5, -5, -5, -5, -4 },
                    {-3, -4, -4, -4, -4, -4, -4, -3 }
            },
            {       // 11-BKnight
                    {-2, -3, -3, -3, -3, -3, -3, -2 },
                    {-4, -4, -5, -5, -5, -5, -4, -3 },
                    {-4, -5, -5, -5, -5, -5, -5, -3 },
                    {-4, -5, -5, -6, -6, -5, -5, -3 },
                    {-4, -5, -5, -6, -6, -5, -5, -3 },
                    {-4, -5, -5, -5, -5, -5, -5, -3 },
                    {-4, -4, -5, -5, -5, -5, -4, -3 },
                    {-2, -3, -3, -3, -3, -3, -3, -2 }
            },
            {       // 12-BPawn
                    {-1, -1, -1, -1, -1, -1, -1, -1 },
                    {-3, -3, -3, -3, -3, -3, -3, -3 },
                    {-2, -2, -2, -2, -2, -2, -2, -2 },
                    {-2, -2, -2, -2, -2, -2, -2, -2 },
                    {-1, -1, -1, -1, -1, -1, -1, -1 },
                    {-1, -1, -1, -1, -1, -1, -1, -1 },
                    {-1, -1, -1, -1, -1, -1, -1, -1 },
                    {-1, -1, -1, -1, -1, -1, -1, -1 }
            },
    };

    @Override
    public double evaluate(Board board, int player) {
        double score = 0;
        ChessBoard cb = (ChessBoard) board;

        for (int r = 0; r < 8; r++) {
            for (int c = 0; c < 8; c++) {
                PieceType piece = cb.get(r,c);
                score += pieceValues[piece.ordinal()][r][c];
            }
        }

        return (player== Chess.WHITE ? score:-score);

    }
}
